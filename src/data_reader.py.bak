# read input data
import vtk

def read_input_file(filename):

    file_name = filename.lower()
        
    # Read the data file.
    if file_name.endswith(".vtk"):  # read all legacy vtk types

        # PolyData, StructuredGrid, StructuredPoints, UnstructuredGrid, RectilinearGrid
        reader = vtk.vtkDataSetReader()
        reader.ReadAllScalarsOn()
        reader.ReadAllVectorsOn()
        reader.ReadAllTensorsOn()
        reader.ReadAllFieldsOn()
        reader.ReadAllNormalsOn()
        reader.ReadAllColorScalarsOn()

    elif file_name.endswith(".vtu"):  # read XML unstructuredGrid type
        reader = vtk.vtkXMLUnstructuredGridReader()
        reader.SetFileName(file_name)

    elif file_name.endswith(".vts"):  # read XML structuerdGrid type
        reader = vtk.vtkXMLStructuredGridReader()
        reader.SetFileName(file_name)

    elif file_name.endswith(".plt"):  # read Tecplot data file (binary)
        reader = vtk.vtkTecplotReader()
        reader.SetFileName(file_name)

    elif file_name.endswith(".dat"):  # read Tecplot data file (ASCII)
        
        # tried for unstructured tecplot data; not working
        reader = vtk.vtkTecplotReader()
        reader.SetFileName(file_name)

    elif file_name.endswith(".p3d"):  # read Plot3D data file
            
        reader = vtk.vtkPlot3DMetaReader()
        reader.SetFileName(file_name)
        
    elif file_name.endswich(".cgns"): # read cgns data file
            
        # to be done
        print('to be done')

    reader.Update()  # Needed because of GetScalarRange

    if file_name.endswith(".dat"):
        output = reader.GetOutput().GetBlock(0)
        if output == None:   # if the default reader fails
            import tecIO as tec
                
            plt = tec.Tecplot()
            plt.read_tecplot(file_name)
            #only load the first zone
            tecpoints = vtk.vtkPoints()
            tecpoints.SetData(VN.numpy_to_vtk(plt.zones[0].xyz))
            if plt.zones[0].hexa_elements.any():
                celltype = vtk.VTK_HEXAHEDRON
                cellConn = plt.zones[0].hexa_elements
            if plt.zones[0].tet_elements.any():
                celltype = vtk.VTK_TETRA
                cellConn = plt.zones[0].tet_element
            if plt.zones[0].quad_elements.any():
                celltype = vtk.VTK_QUAD
                cellConn = plt.zones[0].quad_elements
            if plt.zones[0].tri_elements.any():
                celltype = vtk.VTK_TRIANGLE
                cellConn = plt.zones[0].tri_elements
 
            connectdata = np.concatenate((np.ones((cellConn.shape[0], 1), dtype=int)*cellConn.shape[1], cellConn), axis=1).ravel()
            teccells = vtk.vtkCellArray()
            teccells.SetNumberOfCells(cellConn.shape[0])
            teccells.SetCells(cellConn.shape[0], VN.numpy_to_vtk(connectdata, deep=True, array_type=vtk.VTK_ID_TYPE))
            output = vtk.vtkUnstructuredGrid()
            output.SetPoints(tecpoints)
            output.SetCells(celltype, teccells)
            for i in range(len(plt.zones[0].variables)-3):
                tecarray = VN.numpy_to_vtk(plt.zones[0].nodal_results[:,i])
                tecarray.SetName(plt.zones[0].variables[i+3])
                output.GetPointData().AddArray(tecarray)
        
    elif file_name.endswith(".plt"):
        
        # external helper to load binary tecplot data
        import binarytecplot as bt
            
        output = None
        tecline = bt.LoadTecplotFile(file_name, info = True)
        x_arr = np.array(tecline.zone[0].data[0])
        y_arr = np.array(tecline.zone[0].data[1])
        z_arr = np.array(tecline.zone[0].data[2])
        nxyz  = 3

        if tecline.zone[0].type == 1:
            celltype = vtk.VTK_LINE
        if tecline.zone[0].type == 2:
            celltype = vtk.VTK_TRIANGLE
        if tecline.zone[0].type == 3:
            celltype = vtk.VTK_QUAD
        if tecline.zone[0].type == 4:
            celltype = vtk.VTK_TETRA
        if tecline.zone[0].type == 5:
            celltype = vtk.VTK_HEXAHEDRON
        if tecline.zone[0].type == 6:
            celltype = vtk.VTK_POLYGON
        if tecline.zone[0].type == 7:
            celltype = vtk.VTK_POLYHEDRON

        xyz_arr = np.column_stack((x_arr, y_arr, z_arr))
        tecpoints = vtk.vtkPoints()
        tecpoints.SetData(VN.numpy_to_vtk(xyz_arr))
        cellConn = np.array(tecline.zone[0].connectivity, dtype=np.uint)

        connectdata = np.concatenate((np.ones((cellConn.shape[0], 1), dtype=int)*cellConn.shape[1], cellConn), axis=1).ravel()

        teccells = vtk.vtkCellArray()
        teccells.SetNumberOfCells(cellConn.shape[0])
        teccells.SetCells(cellConn.shape[0], VN.numpy_to_vtk(connectdata, deep=True, array_type=vtk.VTK_ID_TYPE))
        output = vtk.vtkUnstructuredGrid()
        output.SetPoints(tecpoints)
        output.SetCells(celltype, teccells)
        varlist = tecline.zone[0].variable
        for i in range(len(varlist)-nxyz):
            tecarray = VN.numpy_to_vtk(np.array(tecline.zone[0].data[nxyz+i]))
            tecarray.SetName(varlist[nxyz+i])
            output.GetPointData().AddArray(tecarray)

    elif file_name.endswith(".p3d"):
        output = reader.GetOutput().GetBlock(0)
    else:
        output = reader.GetOutput()


    return output
